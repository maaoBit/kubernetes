// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: api/v2rpc/rpc.proto

package v2rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReadClient is the client API for Read service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReadClient interface {
	// get single key
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// range keys from key to end
	Range(ctx context.Context, in *RangeRequest, opts ...grpc.CallOption) (*RangeResponse, error)
	// rane keys in stream mode
	RangeStream(ctx context.Context, in *RangeRequest, opts ...grpc.CallOption) (Read_RangeStreamClient, error)
	// count keys from key to end
	Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// list partitions for keys from key to end
	ListPartition(ctx context.Context, in *ListPartitionRequest, opts ...grpc.CallOption) (*ListPartitionResponse, error)
}

type readClient struct {
	cc grpc.ClientConnInterface
}

func NewReadClient(cc grpc.ClientConnInterface) ReadClient {
	return &readClient{cc}
}

func (c *readClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/Read/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readClient) Range(ctx context.Context, in *RangeRequest, opts ...grpc.CallOption) (*RangeResponse, error) {
	out := new(RangeResponse)
	err := c.cc.Invoke(ctx, "/Read/Range", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readClient) RangeStream(ctx context.Context, in *RangeRequest, opts ...grpc.CallOption) (Read_RangeStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Read_ServiceDesc.Streams[0], "/Read/RangeStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &readRangeStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Read_RangeStreamClient interface {
	Recv() (*StreamRangeResponse, error)
	grpc.ClientStream
}

type readRangeStreamClient struct {
	grpc.ClientStream
}

func (x *readRangeStreamClient) Recv() (*StreamRangeResponse, error) {
	m := new(StreamRangeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *readClient) Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, "/Read/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readClient) ListPartition(ctx context.Context, in *ListPartitionRequest, opts ...grpc.CallOption) (*ListPartitionResponse, error) {
	out := new(ListPartitionResponse)
	err := c.cc.Invoke(ctx, "/Read/ListPartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReadServer is the server API for Read service.
// All implementations must embed UnimplementedReadServer
// for forward compatibility
type ReadServer interface {
	// get single key
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// range keys from key to end
	Range(context.Context, *RangeRequest) (*RangeResponse, error)
	// rane keys in stream mode
	RangeStream(*RangeRequest, Read_RangeStreamServer) error
	// count keys from key to end
	Count(context.Context, *CountRequest) (*CountResponse, error)
	// list partitions for keys from key to end
	ListPartition(context.Context, *ListPartitionRequest) (*ListPartitionResponse, error)
	mustEmbedUnimplementedReadServer()
}

// UnimplementedReadServer must be embedded to have forward compatible implementations.
type UnimplementedReadServer struct {
}

func (UnimplementedReadServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedReadServer) Range(context.Context, *RangeRequest) (*RangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Range not implemented")
}
func (UnimplementedReadServer) RangeStream(*RangeRequest, Read_RangeStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method RangeStream not implemented")
}
func (UnimplementedReadServer) Count(context.Context, *CountRequest) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedReadServer) ListPartition(context.Context, *ListPartitionRequest) (*ListPartitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPartition not implemented")
}
func (UnimplementedReadServer) mustEmbedUnimplementedReadServer() {}

// UnsafeReadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReadServer will
// result in compilation errors.
type UnsafeReadServer interface {
	mustEmbedUnimplementedReadServer()
}

func RegisterReadServer(s grpc.ServiceRegistrar, srv ReadServer) {
	s.RegisterService(&Read_ServiceDesc, srv)
}

func _Read_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Read/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Read_Range_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadServer).Range(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Read/Range",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadServer).Range(ctx, req.(*RangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Read_RangeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RangeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReadServer).RangeStream(m, &readRangeStreamServer{stream})
}

type Read_RangeStreamServer interface {
	Send(*StreamRangeResponse) error
	grpc.ServerStream
}

type readRangeStreamServer struct {
	grpc.ServerStream
}

func (x *readRangeStreamServer) Send(m *StreamRangeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Read_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Read/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadServer).Count(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Read_ListPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadServer).ListPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Read/ListPartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadServer).ListPartition(ctx, req.(*ListPartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Read_ServiceDesc is the grpc.ServiceDesc for Read service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Read_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Read",
	HandlerType: (*ReadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Read_Get_Handler,
		},
		{
			MethodName: "Range",
			Handler:    _Read_Range_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _Read_Count_Handler,
		},
		{
			MethodName: "ListPartition",
			Handler:    _Read_ListPartition_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RangeStream",
			Handler:       _Read_RangeStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v2rpc/rpc.proto",
}

// WatchClient is the client API for Watch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WatchClient interface {
	// Watch watches for events happening or that have happened. Both input and output
	// are streams; the input stream is for creating and canceling watchers and the output
	// stream sends events. One watch RPC can watch on multiple key ranges, streaming events
	// for several watches at once. The entire event history can be watched starting from the
	// last compaction revision.
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (Watch_WatchClient, error)
}

type watchClient struct {
	cc grpc.ClientConnInterface
}

func NewWatchClient(cc grpc.ClientConnInterface) WatchClient {
	return &watchClient{cc}
}

func (c *watchClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (Watch_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Watch_ServiceDesc.Streams[0], "/Watch/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Watch_WatchClient interface {
	Recv() (*WatchResponse, error)
	grpc.ClientStream
}

type watchWatchClient struct {
	grpc.ClientStream
}

func (x *watchWatchClient) Recv() (*WatchResponse, error) {
	m := new(WatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WatchServer is the server API for Watch service.
// All implementations must embed UnimplementedWatchServer
// for forward compatibility
type WatchServer interface {
	// Watch watches for events happening or that have happened. Both input and output
	// are streams; the input stream is for creating and canceling watchers and the output
	// stream sends events. One watch RPC can watch on multiple key ranges, streaming events
	// for several watches at once. The entire event history can be watched starting from the
	// last compaction revision.
	Watch(*WatchRequest, Watch_WatchServer) error
	mustEmbedUnimplementedWatchServer()
}

// UnimplementedWatchServer must be embedded to have forward compatible implementations.
type UnimplementedWatchServer struct {
}

func (UnimplementedWatchServer) Watch(*WatchRequest, Watch_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedWatchServer) mustEmbedUnimplementedWatchServer() {}

// UnsafeWatchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WatchServer will
// result in compilation errors.
type UnsafeWatchServer interface {
	mustEmbedUnimplementedWatchServer()
}

func RegisterWatchServer(s grpc.ServiceRegistrar, srv WatchServer) {
	s.RegisterService(&Watch_ServiceDesc, srv)
}

func _Watch_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WatchServer).Watch(m, &watchWatchServer{stream})
}

type Watch_WatchServer interface {
	Send(*WatchResponse) error
	grpc.ServerStream
}

type watchWatchServer struct {
	grpc.ServerStream
}

func (x *watchWatchServer) Send(m *WatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Watch_ServiceDesc is the grpc.ServiceDesc for Watch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Watch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Watch",
	HandlerType: (*WatchServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Watch_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v2rpc/rpc.proto",
}

// WriteClient is the client API for Write service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WriteClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Compact(ctx context.Context, in *CompactRequest, opts ...grpc.CallOption) (*CompactResponse, error)
}

type writeClient struct {
	cc grpc.ClientConnInterface
}

func NewWriteClient(cc grpc.ClientConnInterface) WriteClient {
	return &writeClient{cc}
}

func (c *writeClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/Write/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writeClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/Write/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writeClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/Write/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writeClient) Compact(ctx context.Context, in *CompactRequest, opts ...grpc.CallOption) (*CompactResponse, error) {
	out := new(CompactResponse)
	err := c.cc.Invoke(ctx, "/Write/Compact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WriteServer is the server API for Write service.
// All implementations must embed UnimplementedWriteServer
// for forward compatibility
type WriteServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Compact(context.Context, *CompactRequest) (*CompactResponse, error)
	mustEmbedUnimplementedWriteServer()
}

// UnimplementedWriteServer must be embedded to have forward compatible implementations.
type UnimplementedWriteServer struct {
}

func (UnimplementedWriteServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWriteServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedWriteServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedWriteServer) Compact(context.Context, *CompactRequest) (*CompactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compact not implemented")
}
func (UnimplementedWriteServer) mustEmbedUnimplementedWriteServer() {}

// UnsafeWriteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WriteServer will
// result in compilation errors.
type UnsafeWriteServer interface {
	mustEmbedUnimplementedWriteServer()
}

func RegisterWriteServer(s grpc.ServiceRegistrar, srv WriteServer) {
	s.RegisterService(&Write_ServiceDesc, srv)
}

func _Write_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriteServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Write/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriteServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Write_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriteServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Write/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriteServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Write_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriteServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Write/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriteServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Write_Compact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriteServer).Compact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Write/Compact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriteServer).Compact(ctx, req.(*CompactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Write_ServiceDesc is the grpc.ServiceDesc for Write service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Write_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Write",
	HandlerType: (*WriteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Write_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Write_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Write_Delete_Handler,
		},
		{
			MethodName: "Compact",
			Handler:    _Write_Compact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v2rpc/rpc.proto",
}
